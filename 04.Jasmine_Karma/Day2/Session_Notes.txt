Testing Services, Pipes and Http Calls
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.  Testing Pipes   (Isolated testing)
~~~~~~~~~~~~~~~~~~~~~~~~~~~

ng  test    --include  "src/app/gender.pipe.spec.ts"

---> We need to test the transform method input and output.

---> Write separate test cases for possible inputs.
			Eg:			a.    m --	male
							b.    f --	female
							c.    M/F   ----   male/female 
							
---> Write separate test cases for invalid input. 






2. Testing Services   (Isolated testing)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

--> Testing the services without dependencies.

--> Test object creation for the service.

		  let service: CalculatorService;		 
		 service = TestBed.inject(CalculatorService);

--> Test the props and methods.

-----------------------------------------------------------------------------------------------------

What is code coverage?  How to do code coverage in Angular?


--> Code coverage is a metric/measure of the degree to which the source code of a program is executed when a particular test suite is run. 

--> Code coverage is the percentage of code which is covered by automated tests. 

 
 In Angular
 ~~~~~~~~~
 
 --> The CLI can run unit tests and create code coverage reports. 
 --> To generate a coverage report run the following command:

		>  ng   test   --no-watch   --code-coverage
 
 
 Sample Report:
 
 =============================== Coverage summary ===============================
Statements   : 84.61% ( 44/52 )
Branches     : 75% ( 6/8 )
Functions    : 76.47% ( 13/17 )
Lines        : 82.92% ( 34/41 )
================================================================================



ng  test    --include  "src/app/calculator.service.spec.ts"








3. Testing Services   (with dependencies)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

--> Testing the services with  dependencies.

Eg:  
			CalculatorService is depends on LogService
			DataService is depends on HttpClient
	
--> CalculatorService is depends on LogService
















			

Using Jasmine Spies in Angular Testing to mocking the dependencies
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--> Jasmine spies are used to track or stub functions or methods. 

--> Spies are a way to check if a function was called or to provide a custom return value. 

--> We can use spies to test components/services that depend on service and avoid actually calling the serviceâ€™s methods to get a value. 

--> This helps keep our unit tests focused on testing the internals of the component/services itself instead of its dependencies.

--> There are two types of spying technology available in Jasmine.

			a.  using spyOn() : 
					it is inbuilt into the Jasmine library which allows you to spy on a definite piece of code.
					
					 spyOn(demoService, "hello");
					 spyOn(EngineService, 'getHorsepower');					 
					 spyOn(EngineService.prototype, 'getHorsepower').and.returnValue(400);
					
			b.  using createSpyObj()
					--> jasmine.createSpyObj is used to create a mock that will spy on one or more methods.
					--> It returns an object that has a property for each string that is a spy. If you want to create a mock you should use jasmine.
						
						Eg:
						
							let loggerServiceSpy: { log: jasmine.Spy};								
							loggerServiceSpy = jasmine.createSpyObj('LoggerService', ['log']);
													
						
							let engineServiceSpy: { getHorsepower: jasmine.Spy};	
							engineServiceSpy = jasmine.createSpyObj('EngineService', 'getHorsepower');
							engineServiceSpy.getHorsepower.and.returnValue(400);
							
							
							 let httpClientSpy: { get: jasmine.Spy, post: jasmine.Spy };	
							httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']);
							httpClientSpy.get.and.returnValue(of(sampleData));							
---------------------------------------------------------------------------------------------------------							

ng  test    --include  "src/app/data.service.spec.ts"



Note:  Import HttpClientTestingModule while testing the services that are depends on HttpClient.

		import { HttpClientTestingModule } from '@angular/common/http/testing';
		
		 TestBed.configureTestingModule({
				imports: [HttpClientTestingModule]
		});
		
	





Note: 
-->  TestBed.get() was deprecated as of Angular version 9. To help minimize breaking changes, Angular introduces a new function called TestBed.inject(), which you should use instead.

-----------------------------------------------------------------------------------------------------------------------


Writing a deep integration test to test a component and its template using its child components
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


import { By } from '@angular/platform-browser';

  it('renders child component - dept-details', () => {
    const childComponent = fixture.debugElement.query(By.css("app-dept-details"));
    expect(childComponent).toBeTruthy();
  });
  
  
  
    it('perform child component event through parent - onDeptRemove', () => {
    const dno = 10;
    const childComponent = fixture.debugElement.query(By.css("app-dept-details"));
 
    childComponent.triggerEventHandler('onDeptRemove',10);
 
    const result = component.deptsArray.findIndex(item => item.deptno === dno);
    expect(result).toBe(-1);
  });
  
  
  
  

Component Instance
~~~~~~~~~~~~~~~~~

	Description :   instance of the specified component.  Used to access the members of the Component class.

	Usage:			
	
				let component: DeptsComponent;
				component = fixture.componentInstance;

				component.deptsArray
				component.getData_click()
				etc....


ComponentFixture 
~~~~~~~~~~~~~~~~~

Description :  
		--> used to testing / debugging component.
		--> quering component details especially template information. 


Usage:
		
		let fixture: ComponentFixture<DeptsComponent>;
		fixture = TestBed.createComponent(DeptsComponent);
		
		Members:		
			a.  componentInstance	:	The instance of the root component class.
			
			b.  nativeElement property:  nativeElement returns a reference to the DOM element
						fixture.nativeElement.querySelector("input");
			
			c.   debugElement:  returns  that contains all kinds of references and methods relevant to investigate an element or component 
						fixture.debugElement.query(By.css("app-dept-details"));

						
			d.   detectChanges()  method	:		Trigger a change detection cycle for the component.		
			
		

		
 Details about nativeElement and debugElement
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 
 1.  nativeElement
			a.   querySelector("input");
			b.   querySelector("input");
			
2.   debugElement
			a.  properties	---	  	to access all the properties
			b.  query			----	to get first matching element 
			c.  queryAll		-----	to get all matching element
			d. triggerEventHandler() 	----		to trigger the event
		
 

--------------------------------------------------------------------------------------------------------------------------

Testing Routes in Angular
~~~~~~~~~~~~~~~~~~~~~

--> Verify the navigation to the correct routes.
--> Verify the parameters in the routes
--> Suppose routes are secured, then it supposed to navigate to login route
		--> Emps   --> Login
		

Required Types
~~~~~~~~~~~~~~

1. RouterTestingModule 	----		@angular/router/testing
2. Location 		---		@angular/common
3.  TestBed			---		@angular/core/testing
	 ComponetFixture
	 fakeAsync
	 tick
4.	 routes			----		app-routing.module
5.  Required Components

--------------------------------------------------------------


1.  Navigate to ---  /depts
2.  Go to  --- Login?returnUrl=/Depts
3.  Access input and enter uid/pwd 
4.  Click login button click 
5.  Current location should be /depts


--------------------------------------------------------------------------------------




 



