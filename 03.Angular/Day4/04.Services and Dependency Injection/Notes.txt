Angular Services and Dependency Injection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--> A Service  is  a class that contains re-usable logic across the application.
--> A component can delegate certain tasks to services, such as fetching data from the server, validating user inputs, logging messages on the console. 


Dependency Injection
~~~~~~~~~~~~~~~~~
--> Dependency Injection is a popular design pattern. 
--> DI is design pattern in which a class requests the dependencies from external sources rather than creating them itself. 
--> Angular DI framework provides dependencies to a class upon instantiation.
	Use DI to increase flexibility and modularity  in your application. 


How to create a services?


>		ng 	g 	s  DbServices


@Injectable()
export class DbService
{
	// logic
	
}


How to inject the services in Angular Components?


...
export class EmpDetailsComponent   {
	
	
	constructor( private  serviceObj:DbService ){
		
	} 
}	



Note:

--> When Angular discovers that a component depends on a service, it first checks if the injector has any existing instances of that service. 

--> If a requested service instance doesn't yet exist, the injector makes one , and adds it to the injector before returning the service to Angular.

-->When all requested services have been resolved and returned, Angular can call the component's constructor with those services as arguments.



Providing Service
~~~~~~~~~~~~~~~

1. Root Level

	a.   AppModule 	---		@NgModule( {    providers:  [DbService]  } )
	b.   @Injectable({  providedIn: 'root' })


2. Feature Module Level

	@Injectable({  providedIn: 'AdminModule' })


3. Component Level
		
		@Component({
		  .....
		  providers: [DbService]
		})
		
--------------------------------------------------------------------------------		
